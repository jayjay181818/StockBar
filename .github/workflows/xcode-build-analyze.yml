name: Xcode - Build and Analyze

on:
  push:
    branches: [ "main", "testing" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    name: Build and analyze
    runs-on: macos-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install yfinance

    - name: Set Default Scheme
      run: |
        scheme_list=$(xcodebuild -list -json | tr -d "\n")
        default=$(echo $scheme_list | ruby -e "require 'json'; puts JSON.parse(STDIN.gets)['project']['targets'][0]")
        echo $default | cat >default
        echo Using default scheme: $default

    - name: Build
      env:
        scheme: ${{ 'default' }}
        platform: ${{ 'macOS' }}
      run: |
        # xcrun xctrace returns via stderr, not the expected stdout (see https://developer.apple.com/forums/thread/663959)
        device=`xcrun xctrace list devices 2>&1 | grep -oE 'macOS.*?[^\(]+' | head -1 | awk '{$1=$1;print}' | sed -e "s/ Simulator$//"`
        if [ $scheme = default ]; then scheme=$(cat default); fi
        if [ "`ls -A | grep -i \\.xcworkspace\$`" ]; then filetype_parameter="workspace" && file_to_build="`ls -A | grep -i \\.xcworkspace\$`"; else filetype_parameter="project" && file_to_build="`ls -A | grep -i \\.xcodeproj\$`"; fi
        file_to_build=`echo $file_to_build | awk '{$1=$1;print}'`
        xcodebuild build analyze test -scheme "$scheme" -"$filetype_parameter" "$file_to_build" -destination "platform=$platform,name=$device" CODE_SIGNING_ALLOWED=NO

    - name: Archive build artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: |
          ~/Library/Developer/Xcode/DerivedData/*/Build/Products/
          ~/Library/Developer/Xcode/DerivedData/*/Logs/
        retention-days: 7